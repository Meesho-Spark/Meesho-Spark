version: '3.8'

services:
  # Frontend (Next.js)
  frontend:
    build:
      context: .
      dockerfile: Dockerfile.frontend
    ports:
      - "3000:3000"
    environment:
      - NEXT_PUBLIC_API_URL=http://localhost:3001
      - NEXT_PUBLIC_AI_SERVICE_URL=http://localhost:8000
    depends_on:
      - backend
      - ai-service
    volumes:
      - .:/app
      - /app/node_modules

  # Backend (Next.js API Routes)
  backend:
    build:
      context: .
      dockerfile: Dockerfile.backend
    ports:
      - "3001:3001"
    environment:
      - NODE_ENV=development
      - JWT_SECRET=meesho_spark_jwt_secret_2024
      - JWT_REFRESH_SECRET=meesho_spark_refresh_secret_2024
      - AI_SERVICE_URL=http://ai-service:8000
    depends_on:
      - mongodb
      - redis
    volumes:
      - .:/app
      - /app/node_modules

  # AI Service (Python FastAPI)
  ai-service:
    build:
      context: ./scripts
      dockerfile: Dockerfile.ai-service
    ports:
      - "8000:8000"
    environment:
      - GEMINI_API_KEY=AIzaSyCqFcFaxFrHz1z0NOhdR71FDDZcn66VfFs
      - PYTHONPATH=/app
    volumes:
      - ./scripts:/app

  # MongoDB Database
  mongodb:
    image: mongo:7.0
    ports:
      - "27017:27017"
    environment:
      - MONGO_INITDB_ROOT_USERNAME=admin
      - MONGO_INITDB_ROOT_PASSWORD=password
      - MONGO_INITDB_DATABASE=meesho_spark
    volumes:
      - mongodb_data:/data/db
      - ./scripts/init-mongo.js:/docker-entrypoint-initdb.d/init-mongo.js:ro

  # Redis Cache
  redis:
    image: redis:7.2-alpine
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data

  # Nginx Load Balancer (Optional)
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
    volumes:
      - ./scripts/nginx.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      - frontend
      - backend
      - ai-service

volumes:
  mongodb_data:
  redis_data:
